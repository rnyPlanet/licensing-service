version: '2.1'

services:
  database:
    build: ./db_init
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: ostock_dev
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      backend:
        aliases:
          - database

  configserver:
    build: ./../configserver
    ports:
      - "8071:8071"
    networks:
      backend:
        aliases:
          - configserver

  eurekaserver:
    build: ./../eurekaserver
    ports:
      - "8070:8070"
    environment:
      SPRING_PROFILES_ACTIVE: dock
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - eurekaserver

  gatewayserver:
    build: ./../gatewayserver
    ports:
      - "8072:8072"
    environment:
      SPRING_PROFILES_ACTIVE: dock
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  licensingservice:
    build: ./../licensing-service
    environment:
      SPRING_PROFILES_ACTIVE: dock
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
    ports:
      - "8081:8081"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    networks:
      - backend
    links:
      - database

  organizationservice:
    build: ./../organization-service
    environment:
      SPRING_PROFILES_ACTIVE: dock
      SPRING_CLOUD_CONFIG_URI: http://configserver:8071
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/ostock_dev
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - backend


  zookeeper:
    image: zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - zookeeper

  kafkaserver:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - kafka

  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
networks:
  backend:
    driver: bridge